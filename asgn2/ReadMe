0. Team members
============
* Name: Xiang Yu,
  ID: 109417626
* Name: Yuxuan Shui,
  ID: 109955038

1. The structure for storing the information of each socket
========================================================
See utils.h:

    struct sock_info_aux {
        int sock_fd;
        struct sockaddr * ip_addr;
        struct sockaddr * net_mask;
        struct sockaddr * subn_addr;
    };

2. Strictly unicast only
=====================
See server.c

We didn't bind ifi->ifi_braddr or something else.

We only bind ifi->ifi_addr, which are unicast address.

3. RTT mechanism
================
See utils.h and utils.c and server.c

    struct rtt_info {
        int rtt_rtt; /* most recent measured RTT, in milliseconds */
        int rtt_srtt; /* smoothed RTT estimator, in milliseconds */
        int rtt_rttvar; /* smoothed mean deviation, in milliseconds */ 
        int rtt_rto; /* current RTO to use, in milliseconds */
        int rtt_nrexmt; /* # times retransmitted: 0, 1, 2, ... */
        uint32_t rtt_base; /* # msec since 1/1/1970 at start */
    };

modification: change all numeric operation from float to int

keypoint:

a. every datagram during file transmission, has its own rtt_info structure
    which means each datagram has its own timeout timer
b. after receiving each valid ACK from client, server will update RTO of several datagrams,
    which are in the sender sliding window, sent but not acked.
c. During the 3-step handshake procedure, due to the insufficient timestamp information,
    we apply a simple timeout mechanism, which repetively try from 3 seconds timeout to 12 seconds

4. ARQ mechanism
=============
See server.c

A sender sliding window with the maximum size of the number declared in server.in
configuration file.

Using a loop array to implement such structure.

Has a left-window-boundary, right-window-boundary and a sent-but-not-acked boundary,
these 3 pointers with the structure.

The figure is like as below:

                     |                       |                |
      left-boundary  |  sent-no-ack-boundary | right-boundary |
    (sent and acked) | (sent but not acked)  | (can be sent)  | (cannot be sent)

Every time, sender sends all the datagrams in the (sent-no-ack, right-boundary],
and the sent-no-ack boundary moves right

When sender gets an ACK from receiver, the left-boundary moves right to the datagram
denoted by ACK datagram's ack (which is the next datagram should be acked)

On the client, there are also three boundaries:

                            |                       |                        |
             left boundary  |    next-seq boundary  |         right boundary |
    (received but not read) | (next missing packet) | (largest seq received) |

The available window size is whole_window_size - (next-seq - left).

Every time a packet is read by the reader thread, left boundary is updated.

Every time a packet is receive, the client will scan the area from next-seq boundary to right boundary,
to see if there's a continuous range of packets received. If so, the client will update next-seq to the
next missing packet. Then client will send an ACK to the server, with next-seq as its ack number.


5. Other mechanism of adding reliability
=====================================

a. congestion avoidance: slow start with AIMD
--------------

See server.c

add a congestion window, cwnd with init value:1

every time a complete window has been sent by server and acknowledged by client

the cwnd value would be added by 1

the real sender sliding window size would be the smaller one of (Maximum sender
slding window size, receiver advertised sliding window size and congetsion window size)

when a congestion is detected, namely TIMEOUT happended, the window decreased half of its size

c. fast retransmit:
----------------

d. fast recovery:
--------------

6. End-of-connection notification
==============================

We notify the client that connection is ended by sending a FIN packet to client from the server.
After the client received a FIN packet, it will send the server a FIN/ACK packet, which server will
reply with a ACK. After the client received the ACK packet, the connection is terminated.

All these packets are backed-up by a timeout re-transmittion mechanism.
