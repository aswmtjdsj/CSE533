Team members
============
* Name: Xiang Yu,
  ID: 109417626
* Name: Yuxuan Shui,
  ID: 109955038

The structure for storing the information of each socket
========================================================
See utils.h:

    struct sock_info_aux {
        int sock_fd;
        struct sockaddr * ip_addr;
        struct sockaddr * net_mask;
        struct sockaddr * subn_addr;
    };

Strictly unicast only
=====================
See server.c

We didn't bind ifi->ifi_braddr or something else.

We only bind ifi->ifi_addr, which are unicast address.

RTT mechanism
================
See utils.h and utils.c and server.c

    struct rtt_info {
        int rtt_rtt; /* most recent measured RTT, in milliseconds */
        int rtt_srtt; /* smoothed RTT estimator, in milliseconds */
        int rtt_rttvar; /* smoothed mean deviation, in milliseconds */ 
        int rtt_rto; /* current RTO to use, in milliseconds */
        int rtt_nrexmt; /* # times retransmitted: 0, 1, 2, ... */
        uint32_t rtt_base; /* # msec since 1/1/1970 at start */
    };

modification: change all numeric operation from float to int

keypoint:

* every datagram during file transmission, has its own rtt_info structure
    which means each datagram has its own timeout timer
* after receiving each valid ACK from client, server will update RTO of several datagrams,
    which are in the sender sliding window, sent but not acked.

ARQ mechanism
=============
//

Other mechanism of adding reliability
=====================================

slow start:
-----------
//

congestion avoidance:
---------------------
//

fast retransmit:
----------------

fast recovery:
--------------

End-of-connection notification
==============================

We notify the client that connection is ended by sending a FIN packet to client from the server.
After the client received a FIN packet, it will send the server a FIN/ACK packet, which server will
reply with a ACK. After the client received the ACK packet, the connection is terminated.

All these packets are backed-up by a timeout re-transmittion mechanism.
